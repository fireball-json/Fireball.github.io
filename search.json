[{"title":"Typescript Study Notes","url":"/2024/02/20/Typescript Study Notes/","content":"\n## Catalouge\n  - [Preface](#preface)\n  - [Union type and Intersection type](#utait)\n    - [Keyof Union type](#utait_1)\n    - [Satisfies](#utait_2)\n    - [Ergodic union type](#utait_3)\n\n## <span id=\"preface\" />Preface\nI have used Typescript in development for about one and half year, but a systematic learning is never happened during my front-end work. Luckly, I got a period time between my last job and my next job, so it's time to make deep study of Typescript🎉!\n\n## <span id=\"utait\" />Union type and Intersection type\n#### <span id=\"utait_1\" />1. Keyof union type\nUnion type is a way to combine types, formed from two or more other types. So what about the keys of a union type?\n``` Typescript\ntype UnionInterface = { name: string } | { name: string; age: number; sex: number }\n\nconst people1: UnionInterface = { name: 'JACK' } // √\nconst people2: UnionInterface = { name: 'JACK', age: 23 } // √\nconst people3: UnionInterface = { age: 23 } // ×\n```\nThe example above confused me a lot at first. But an explain from `The Typescript Handbook` may help us understand the loogic of it.\n> Only the intersection of those facts applies to the union of the sets themselves. For example, if we had a room of tall people wearing hats, and another room of Spanish speakers wearing hats, after combining those rooms, the only thing we know about every person is that they must be wearing a hat.\n\nThe key **`name`** can be interpreted as `a safety key` which means every member of the union type **`UnionInterface`** must have it. Then a conclusion come naturally that `keyof`**`UnionInterface`** expected to be **`name`**, or a union type seems has some properties of an intersection type.\n\n#### <span id=\"utait_2\" />2. Satisfies\nProviding a value matching a union type is pretty easy: just provide a type that matching any memebers of the union type. However, somtimes we want to restrict the type of the value without rewrite a union type. `Typescript 4.9` give a keyword named **`satisfies`**.\n``` Typescript\ntype SatisfiesType = {\n  name: string\n  hobby: 'soccer' | 'tennis' | 'swimming' | 'running'\n}\n\nconst Jack: SatisfiesType = {\n  name: 'Jack',\n  hobby: 'soccer' | 'tennis',\n}\n\nconst Mary = {\n  name: 'Mary',\n  hobby: 'swimming' | 'running',\n} satisfies SatisfiesType\n\n// do some reassignment\nJack.hobby = 'swimming' // √\nMary.hobby = 'tennis' // ×\n```\nThis keyword `satisfies` can make prediction of the type with an instance. It provide type declaration and type infers at the same time🎉! But is there any way that can restrict the range of type without an instance. Or in other words, I need a type which can predict other types according to the attribute that entered by myself.\n\n#### <span id=\"utait_3\" />3. Ergodic union type\nIn the section above, there is still a problem of how to predict other attributes' types according to the attribute that entered by myself. For example\n``` Typescript\ntype Hobbies = {\n  Jack: 'tennis' | 'soccer'\n  Mary: 'running' | 'swimming'\n}\n\nconst person: /** some type */ = {\n  name: 'Jack'\n  hobbies: // expected to be 'tennis' | 'soccer'\n}\n```\nIt easy to make it when we declare a union type: \n``` Typescript\ntype Person = {\n  name: 'Jack'\n  hobby: 'tennis' | 'soccer'\n} | {\n  name: 'Mary'\n  hobby: 'running' | 'swimming'\n}\n```\nThis method can work when there is not many members of the union type, and it seems so unpleasant when we have to maitain the type. Therefore we need a more generic method to declare the union type, and a tenary expression: `T extends T ?` may help us a lot.\n``` Typescript\ntype Person<T extends keyof Hobbies = keyof Hobbies> = T extends T\n  ? {\n      name: T\n      hobby: Hobbies[T]\n    }\n  : never\n\nconst person: Person = {\n  name: 'Jack',\n  hobby: // ('tennis' | 'soccer') is inferred\n}\n```\nWith type be like `Person`, it will be super easy for us to get an expect value when we do some coding.\n![Auto predict🎉🎉🎉](../img/blog/typescript_1.png)\n\n### To be continue ... ...","tags":["Typescript"]},{"title":"NuxtJs-2.x Memory Leak","url":"/2024/01/20/NuxtJs Memory Leak/","content":"---\n## Problem\nDuring my previous job, I met a problem where the server memory useage is always increase very quickly, and it will reboot automatically when memory useage reached a threshold. At first, we speculated that meybe it is due to the high visit volume during peak time, and the solution is ...emmm ADD MORE SERVER! (┓( ´∀` )┏)\nAnd it's easy to predict what will happen next: our website will run slower and slower. At last, we decide to check whether we encountered memory leak.\n\n## Memory Leak \nFirst of all, I have to figure it out if the memory leak has really happpened. Our production is a server side render website which we used NuxtJs-2.X to make it. So as the memory leak occurs on the server side, we can't simply use the **`Memory`** tool from Chrome Dev-Tools to take a snapshot of the heap size. Fortunately I discovered a solution from other developer's articles.\n### 1. How to take server side memory snapshot \nThere is a tool that chrome give to us to inspect the devices. Just type **`chrome://inspect/#devices`** into the address bar of chrome broswer, and then you will see something like this:\n\n![chrome://inspect/#devices](../img/blog/memory_leak_1.png)\nSet your server side local address in **`Configure`** of **` Discover network targets`**, and then it will work when the service of server-side is running.\n#### 2. Set inspect port before build\nAfter kowning how to inpect server-side memory useage, there is another problem with how to run our server on a specific port. And Node give us a solution which named `v8 Inspector Protocol`. Add the following code to `package.json`, and run it.\n\n``` bash\n$ \"inspect:start\": \"node --inspect=9001 node_modules/nuxt/bin/nuxt start --modern=server\"\n```\n\n#### 3. Take server-side heap snapshots\nBefore excuting this command, you need build your project first. When the project is running normally, visit `chrome://inspect/#devices`, and choose the `Memory` panel. Take heap snapshots twice and compare them.\n\n![memory snapshot comparation](../img/blog/memory_leak_2.png)\n\nIf you need send lot of concurrent requests when take heap snapshot, try [loadtest](https://github.com/alexfernandez/loadtest), it helps me a lot.\n\n## Solution\nAfter check more code, I found an `eventbus` that may be the ultimate reason.\n\n``` bash\ncreated () {\n  eventHub.$on(EventName, () => {\n    this.loading = true \"//this is use in a component which we regist with vue.component\"\n  })\n},\n```\n\nThough we use `$off` to cancel it in the hook `unmounted`, but but according to the reference of nuxtjs, there are only two lifecycle hooks be called both, from client-side and server-side: `beforeCreate` and `created`. \n\n``` bash\ncreated () {\n  if(process.env === 'client'){ \"//add a enviroment judgement\" \n    eventHub.$on(EventName, () => {\n      this.loading = true \n    })\n  }\n},\n```\nAfter add a judgement about enviroment, I took another two snapshot and the problem seems be solved.\n\n## Conclusion\nThe content above describes the process of how I identify the server-side memory leak problem and solve it. In fact, during the time when I was looking for information in the Nuxtjs document, I found that `vue.use` and `vue.component` may cause memory leak, but I'm not sure if it is related to this project. I can't go into this problem due to my dismissal from my last job, I tried to reproducing the issue with nuxtjs-3.x, but it didn't go as planned. Maybe next time when I meet something simillar, I will update this blog!😊\n\n## Reference\nhttps://medium.com/le-collectionist/solving-server-side-memory-leaks-on-nuxt-js-ecd6b16b54a0\nhttps://stackoverflow.com/questions/66831561/nuxt-add-global-plugins-memory-leakage-issue\nhttps://github.com/alexfernandez/loadtest","tags":["NuxtJs"]}]