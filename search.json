[{"title":"NuxtJs-2.x Memory Leak","url":"/2024/01/20/NuxtJs Memory Leak/","content":"---\n## Problem\nDuring my previous job, I met a problem where the server memory useage is always increase very quickly, and it will reboot automatically when memory useage reached a threshold. At first, we speculated that meybe it is due to the high visit volume during peak time, and the solution is ...emmm ADD MORE SERVER! (┓( ´∀` )┏)\nAnd it's easy to predict what will happen next: our website will run slower and slower. At last, we decide to check whether we encountered memory leak.\n\n## Memory Leak \nFirst of all, I have to figure it out if the memory leak has really happpened. Our production is a server side render website which we used NuxtJs-2.X to make it. So as the memory leak occurs on the server side, we can't simply use the **`Memory`** tool from Chrome Dev-Tools to take a snapshot of the heap size. Fortunately I discovered a solution from other developer's articles.\n### How to take server side memory snapshot \nThere is a tool that chrome give to us to inspect the devices. Just type **`chrome://inspect/#devices`** into the address bar of chrome broswer, and then you will see something like this:\n\n![chrome://inspect/#devices](../img/blog/memory_leak_1.png)\nSet your server side local address in **`Configure`** of **` Discover network targets`**, and then it will work when the service of server-side is running.\n#### Set inspect port before build\nAfter kowning how to inpect server-side memory useage, there is another problem with how to run our server on a specific port. And Node give us a solution which named `v8 Inspector Protocol`. Add the following code to `package.json`, and run it.\n\n``` bash\n$ \"inspect:start\": \"node --inspect=9001 node_modules/nuxt/bin/nuxt start --modern=server\"\n```\n\n#### Take server-side heap snapshots\nBefore excuting this command, you need build your project first. When the project is running normally, visit `chrome://inspect/#devices`, and choose the `Memory` panel. Take heap snapshots twice and compare them.\n\n![memory snapshot comparation](../img/blog/memory_leak_2.png)\n\nIf you need send lot of concurrent requests when take heap snapshot, try [loadtest](https://github.com/alexfernandez/loadtest), it helps me a lot.\n\n## Solution\nAfter check more code, I found an `eventbus` that may be the ultimate reason.\n\n``` bash\ncreated () {\n  eventHub.$on(EventName, () => {\n    this.loading = true \"//this is use in a component which we regist with vue.component\"\n  })\n},\n```\n\nThough we use `$off` to cancel it in the hook `unmounted`, but but according to the reference of nuxtjs, there are only two lifecycle hooks be called both, from client-side and server-side: `beforeCreate` and `created`. \n\n``` bash\ncreated () {\n  if(process.env === 'client'){ \"//add a enviroment judgement\" \n    eventHub.$on(EventName, () => {\n      this.loading = true \n    })\n  }\n},\n```\nAfter add a judgement about enviroment, I took another two snapshot and the problem seems be solved.\n\n## Conclusion\nThe content above describes the process of how I identify the server-side memory leak problem and solve it. In fact, during the time when I was looking for information in the Nuxtjs document, I found that `vue.use` and `vue.component` may cause memory leak, but I'm not sure if it is related to this project. I can't go into this problem due to my dismissal from my last job, I tried to reproducing the issue with nuxtjs-3.x, but it didn't go as planned. Maybe next time when I meet something simillar, I will update this blog!😊\n\n## Reference\nhttps://medium.com/le-collectionist/solving-server-side-memory-leaks-on-nuxt-js-ecd6b16b54a0\nhttps://stackoverflow.com/questions/66831561/nuxt-add-global-plugins-memory-leakage-issue\nhttps://github.com/alexfernandez/loadtest"}]